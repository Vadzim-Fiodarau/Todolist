{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolistReducer.ts","state/taskReducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","style","paddingTop","Button","filter","changeFilter","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","taskId","type","removeTaskAC","newTodolistTitle","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","newTaskTitle","changeTaskTitleAC","action","removeTodolistAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","v1","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","rootReducer","combineReducers","copyState","task","newTask","todolistTasks","find","tdl","newTDL","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f8e236a5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler} />\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type TsarType =\r\n  removeTodolistACType\r\n  | addTodolistACType\r\n  | changeTodolistTitleACType\r\n  | changeTodolistFilterACType\r\n\r\nlet initialState: TodolistType[] = []\r\n\r\nexport const todolistReducer = (state: TodolistType[] = initialState, action: TsarType): TodolistType[] => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST': {\r\n      return state.filter(tdl => tdl.id !== action.id)\r\n    }\r\n    case 'ADD-TODOLIST': {\r\n      const newTDL: TodolistType = {\r\n        id: action.todolistId,\r\n        title: action.title,\r\n        filter: \"all\"\r\n      }\r\n      return [...state, newTDL]\r\n    }\r\n    case 'CHANGE-TODOLIST-TITLE': {\r\n      return state.map(tdl => tdl.id === action.id ? {\r\n        ...tdl,\r\n        title: action.title\r\n      } : tdl)\r\n    }\r\n    case 'CHANGE-TODOLIST-FILTER': {\r\n      return state.map(tdl => tdl.id === action.id ? {\r\n        ...tdl,\r\n        filter: action.filter\r\n      } : tdl)\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nexport type removeTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (id: string) => ({\r\n  type: 'REMOVE-TODOLIST',\r\n  id\r\n}) as const\r\n\r\nexport type addTodolistACType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (newTodolistTitle: string) => ({\r\n  type: 'ADD-TODOLIST',\r\n  title: newTodolistTitle,\r\n  todolistId: v1()\r\n}) as const\r\n\r\ntype changeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n  type: 'CHANGE-TODOLIST-TITLE', id, title\r\n}) as const\r\n\r\ntype changeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n  type: 'CHANGE-TODOLIST-FILTER', id, filter\r\n}) as const","import {FilterValuesType, TasksStateType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {addTodolistACType, removeTodolistACType} from \"./todolistReducer\";\r\n\r\n\r\nexport type ActionTypes =\r\n  removeTaskACType\r\n  | addTaskACType\r\n  | changeTaskStatusACType\r\n  | changeTaskTitleACType\r\n  | addTodolistACType\r\n  | removeTodolistACType\r\n\r\nlet initialState: TasksStateType = {}\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTypes): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      let copyState = {...state}\r\n      copyState[action.todolistId] = copyState[action.todolistId]\r\n        .filter(task => task.id !== action.taskId)\r\n      return copyState\r\n    case 'ADD-TASK': {\r\n      let copyState = {...state}\r\n      let newTask = {id: v1(), title: action.title, isDone: false}\r\n      let todolistTasks = copyState[action.todolistId]\r\n      copyState[action.todolistId] = [newTask, ...todolistTasks]\r\n      // {\r\n      // ...state,\r\n      // [action.todolistId]: [newTask, ...state[action.todoListId]\r\n      // }\r\n      return copyState\r\n    }\r\n    case 'CHANGE-TASK-STATUS': {\r\n      let copyState = {...state}\r\n      let todolistTasks = copyState[action.todolistId]\r\n      let task = todolistTasks.find(task => task.id === action.taskId)\r\n      if (task) {\r\n        task.isDone = action.isDone\r\n      }\r\n      return copyState\r\n    }\r\n    case'CHANGE-TASK-TITLE': {\r\n      let copyState = {...state}\r\n      let todolistTasks = copyState[action.todolistId]\r\n      let task = todolistTasks.find(task => task.id === action.taskId)\r\n      if (task) {\r\n        task.title = action.newTaskTitle\r\n      }\r\n      return copyState\r\n    }\r\n    case'ADD-TODOLIST':\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: []\r\n      }\r\n    case'REMOVE-TODOLIST': {\r\n      let copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n  type: 'REMOVE-TASK',\r\n  todolistId,\r\n  taskId\r\n}) as const\r\n\r\ntype addTaskACType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (newTodolistTitle: string, todolistId: string) => ({\r\n  type: 'ADD-TASK',\r\n  title: newTodolistTitle,\r\n  todolistId\r\n}) as const\r\n\r\ntype changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => ({\r\n  type: 'CHANGE-TASK-STATUS',\r\n  taskId,\r\n  isDone,\r\n  todolistId\r\n}) as const\r\n\r\ntype changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (taskId: string, newTaskTitle: string, todolistId: string) => ({\r\n  type: 'CHANGE-TASK-TITLE',\r\n  taskId,\r\n  newTaskTitle,\r\n  todolistId\r\n}) as const\r\n\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  Toolbar,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n  addTodolistAC,\r\n  changeTodolistFilterAC, changeTodolistTitleAC,\r\n  removeTodolistAC,\r\n  todolistReducer\r\n} from \"./state/todolistReducer\";\r\nimport {\r\n  addTaskAC,\r\n  changeTaskStatusAC, changeTaskTitleAC,\r\n  removeTaskAC,\r\n  tasksReducer\r\n} from \"./state/taskReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n  const todolists = useSelector<AppRootStateType, TodolistType[]>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const dispatch = useDispatch()\r\n\r\n  function removeTask(id: string, todolistId: string) {\r\n    dispatch(removeTaskAC(id, todolistId))\r\n  }\r\n\r\n  function addTask(title: string, todolistId: string) {\r\n    dispatch(addTaskAC(title, todolistId))\r\n  }\r\n\r\n  function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n    dispatch(changeTaskStatusAC(id, isDone, todolistId))\r\n  }\r\n\r\n  function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n    dispatch(changeTaskTitleAC(id, newTitle, todolistId))\r\n  }\r\n\r\n  function changeFilter(value: FilterValuesType, todolistId: string) {\r\n    dispatch(changeTodolistFilterAC(todolistId, value))\r\n  }\r\n\r\n  function removeTodolist(id: string) {\r\n    let action = removeTodolistAC(id)\r\n    dispatch(action)\r\n  }\r\n\r\n  function changeTodolistTitle(id: string, title: string) {\r\n    dispatch(changeTodolistTitleAC(id, title))\r\n  }\r\n\r\n  function addTodolist(title: string) {\r\n    let action = addTodolistAC(title)\r\n    dispatch(action)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n          <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {\r\n            todolists.map(tl => {\r\n              let allTodolistTasks = tasks[tl.id];\r\n              let tasksForTodolist = allTodolistTasks;\r\n\r\n              if (tl.filter === \"active\") {\r\n                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n              }\r\n              if (tl.filter === \"completed\") {\r\n                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n              }\r\n\r\n              return <Grid item>\r\n                <Paper style={{padding: \"10px\"}}>\r\n                  <Todolist\r\n                    key={tl.id}\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    filter={tl.filter}\r\n                    removeTodolist={removeTodolist}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodolistTitle={changeTodolistTitle}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            })\r\n          }\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {todolistReducer} from \"./todolistReducer\";\r\nimport {tasksReducer} from \"./taskReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducer from \"./AppWithReducer\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <AppWithRedux/>\r\n  </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}